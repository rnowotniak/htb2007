/*
 * HTBJApplet.java
 *
 * Created on 18 stycze≈Ñ 2008, 15:30
 */
package htb.gui;

import htb.*;
import java.awt.Component;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.Collections;
import javax.swing.JPanel;
import javax.swing.UIManager;

/**
 *
 * @author  rob
 */
public class HTBJApplet extends javax.swing.JApplet {

    private Generator gen;

    public HTBJApplet() {
        gen = new Generator();
    }

    /** Initializes the applet HTBJApplet */
    @Override
    public void init() {
//        try {
//            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
//        } catch (Exception e) {
//        // DO NOTHING
//        }

        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {

                public void run() {
                    initComponents();
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        setSize(539, 546);

        queuesJTabbedPane.setTitleAt(0, "Upload");
        queuesJTabbedPane.setTitleAt(1, "Download");
        
        mainJTabbedPane.remove(scriptJPanel);
        mainJTabbedPane.setTitleAt(0, "Configuration");

        loadExample1();

    }

    private void loadExample1() {
        queuesJTabbedPane.setSelectedIndex(0);
        gen = new Generator();
        gen.setDownload(new Bandwidth("1mbit"));
        gen.setUpload(new Bandwidth("512kbit"));
        gen.setLan(new Bandwidth("100mbit"));
        gen.setIniface("eth0");
        gen.setOutiface("eth1");
        gen.setImq(false);
        gen.getOutclasses().add(new HTBClass("interactive (ssh etc.)", 8, 20, 1));
        gen.getOutclasses().add(new HTBClass("dns", 4, 30, 2));
        gen.getOutclasses().add(new HTBClass("www", 20, 45, 3));
        gen.getOutclasses().add(new HTBClass("mail", 20, 45, 4));
        gen.getOutclasses().add(new HTBClass("default", 10, 45, 5));
        gen.getOutclasses().add(new HTBClass("bulk", 2, 32, 6));
        gen.getInclasses().add(new HTBClass("interactive (ssh etc.)", 16, 20, 1));
        gen.getInclasses().add(new HTBClass("dns", 8, 20, 2));
        gen.getInclasses().add(new HTBClass("www", 34, 80, 3));
        gen.getInclasses().add(new HTBClass("mail", 34, 90, 4));
        gen.getInclasses().add(new HTBClass("default", 34, 80, 5));
        gen.getInclasses().add(new HTBClass("bulk", 2, 100, 6));
        setValuesFromGenerator();
        uploadJTextField.setText("512 kbit");
        downloadJTextField.setText("1 mbit");
        lanJTextField.setText("100 mbit");
    }

    private void setValuesFromGenerator() {
        uploadJTextField.setText(gen.getUpload().toString());
        downloadJTextField.setText(gen.getDownload().toString());
        lanJTextField.setText(gen.getLan().toString());
        outifaceJTextField.setText(gen.getOutiface());
        inifaceJTextField.setText(gen.getIniface());
        imqJCheckBox.setSelected(gen.isImq());
        inClassesJPanel.removeAll();
        outClassesJPanel.removeAll();
        updateClassesPanels();
    }

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainJTabbedPane = new javax.swing.JTabbedPane();
        scriptJPanel = new javax.swing.JPanel();
        backJButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        scriptJTextArea = new javax.swing.JTextArea();
        configJPanel = new javax.swing.JPanel();
        queuesJTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        outClassesJPanel = new javax.swing.JPanel();
        hTBClassJPanel1 = new htb.gui.HTBClassJPanel();
        hTBClassJPanel2 = new htb.gui.HTBClassJPanel();
        hTBClassJPanel3 = new htb.gui.HTBClassJPanel();
        hTBClassJPanel7 = new htb.gui.HTBClassJPanel();
        hTBClassJPanel5 = new htb.gui.HTBClassJPanel();
        hTBClassJPanel6 = new htb.gui.HTBClassJPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        inClassesJPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lanJTextField = new javax.swing.JTextField();
        uploadJTextField = new javax.swing.JTextField();
        downloadJTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        example1JButton = new javax.swing.JButton();
        addClassJButton = new javax.swing.JButton();
        sortJButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        inifaceJTextField = new javax.swing.JTextField();
        outifaceJTextField = new javax.swing.JTextField();
        imqJCheckBox = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        clearJButton = new javax.swing.JButton();
        generateButton = new javax.swing.JButton();

        mainJTabbedPane.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        backJButton.setText("< BACK");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        scriptJTextArea.setColumns(20);
        scriptJTextArea.setRows(5);
        jScrollPane3.setViewportView(scriptJTextArea);

        org.jdesktop.layout.GroupLayout scriptJPanelLayout = new org.jdesktop.layout.GroupLayout(scriptJPanel);
        scriptJPanel.setLayout(scriptJPanelLayout);
        scriptJPanelLayout.setHorizontalGroup(
            scriptJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(scriptJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(scriptJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(backJButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE))
                .addContainerGap())
        );
        scriptJPanelLayout.setVerticalGroup(
            scriptJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, scriptJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(backJButton)
                .addContainerGap())
        );

        mainJTabbedPane.addTab("tab2", scriptJPanel);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        outClassesJPanel.setLayout(new javax.swing.BoxLayout(outClassesJPanel, javax.swing.BoxLayout.Y_AXIS));
        outClassesJPanel.add(hTBClassJPanel1);
        outClassesJPanel.add(hTBClassJPanel2);
        outClassesJPanel.add(hTBClassJPanel3);
        outClassesJPanel.add(hTBClassJPanel7);
        outClassesJPanel.add(hTBClassJPanel5);
        outClassesJPanel.add(hTBClassJPanel6);

        jScrollPane1.setViewportView(outClassesJPanel);

        queuesJTabbedPane.addTab("tab1", jScrollPane1);

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        inClassesJPanel.setLayout(new javax.swing.BoxLayout(inClassesJPanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(inClassesJPanel);

        queuesJTabbedPane.addTab("tab2", jScrollPane2);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Bandwidth"));

        jLabel5.setLabelFor(downloadJTextField);
        jLabel5.setText("download:");

        jLabel6.setLabelFor(uploadJTextField);
        jLabel6.setText("upload:");

        jLabel7.setLabelFor(lanJTextField);
        jLabel7.setText("LAN:");

        lanJTextField.setText("100 mbit");
        lanJTextField.setToolTipText("Bandwidth of LAN interface");
        lanJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                lanJTextFieldFocusLost(evt);
            }
        });

        uploadJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                uploadJTextFieldFocusLost(evt);
            }
        });

        downloadJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                downloadJTextFieldFocusLost(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel5)
                    .add(jLabel6)
                    .add(jLabel7))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(lanJTextField)
                    .add(downloadJTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .add(uploadJTextField))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(downloadJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(uploadJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(lanJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 14));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Copyright (C) 2007,2008   Robert Nowotniak");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        example1JButton.setFont(new java.awt.Font("Arial", 0, 12));
        example1JButton.setText("Example 1");
        example1JButton.setToolTipText("Load example configuration");
        example1JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                example1JButtonActionPerformed(evt);
            }
        });

        addClassJButton.setFont(new java.awt.Font("Arial", 0, 12));
        addClassJButton.setText("Add class");
        addClassJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addClassJButtonActionPerformed(evt);
            }
        });

        sortJButton.setFont(new java.awt.Font("Arial", 0, 12));
        sortJButton.setText("Sort by prio");
        sortJButton.setToolTipText("Sort classes above by their priorities");
        sortJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortJButtonActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Interfaces"));

        jLabel3.setLabelFor(outifaceJTextField);
        jLabel3.setText("out interface:");

        jLabel4.setLabelFor(inifaceJTextField);
        jLabel4.setText("in interface:");

        inifaceJTextField.setText("br0");
        inifaceJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                inifaceJTextFieldFocusLost(evt);
            }
        });

        outifaceJTextField.setText("eth0");
        outifaceJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                outifaceJTextFieldFocusLost(evt);
            }
        });

        imqJCheckBox.setText("IMQ device:   ");
        imqJCheckBox.setToolTipText("IMQ available");
        imqJCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        imqJCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                imqJCheckBoxStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel3)
                            .add(jLabel4))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, inifaceJTextField)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, outifaceJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(imqJCheckBox)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(outifaceJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(inifaceJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(imqJCheckBox)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel8.setText("default bandwidth unit is: KB/s");

        clearJButton.setFont(new java.awt.Font("Arial", 0, 12));
        clearJButton.setText("Reset");
        clearJButton.setToolTipText("Clear all settings");
        clearJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetJButtonActionPerformed(evt);
            }
        });

        generateButton.setFont(new java.awt.Font("Arial", 1, 12));
        generateButton.setText("GENERATE");
        generateButton.setToolTipText("Generate HTB script");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout configJPanelLayout = new org.jdesktop.layout.GroupLayout(configJPanel);
        configJPanel.setLayout(configJPanelLayout);
        configJPanelLayout.setHorizontalGroup(
            configJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, configJPanelLayout.createSequentialGroup()
                .addContainerGap(86, Short.MAX_VALUE)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(configJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel8)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(78, 78, 78))
            .add(configJPanelLayout.createSequentialGroup()
                .add(12, 12, 12)
                .add(configJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(configJPanelLayout.createSequentialGroup()
                        .add(queuesJTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(configJPanelLayout.createSequentialGroup()
                        .add(addClassJButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(sortJButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 36, Short.MAX_VALUE)
                        .add(example1JButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(clearJButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(generateButton)
                        .add(13, 13, 13))))
        );
        configJPanelLayout.setVerticalGroup(
            configJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(configJPanelLayout.createSequentialGroup()
                .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(3, 3, 3)
                .add(configJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel8)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(queuesJTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(configJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(configJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(addClassJButton)
                        .add(sortJButton))
                    .add(generateButton)
                    .add(configJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(example1JButton)
                        .add(clearJButton)))
                .addContainerGap())
        );

        configJPanelLayout.linkSize(new java.awt.Component[] {jPanel1, jPanel2}, org.jdesktop.layout.GroupLayout.VERTICAL);

        mainJTabbedPane.addTab("tab1", configJPanel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainJTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainJTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 546, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    private void addClassJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addClassJButtonActionPerformed
        HTBClass c = new HTBClass();
        if (queuesJTabbedPane.getSelectedIndex() == 0) {
            c.setCeil(gen.getUpload());
            gen.getOutclasses().add(c);
            outClassesJPanel.add(new HTBClassJPanel(c, this));
            outClassesJPanel.revalidate();
        } else {
            c.setCeil(gen.getDownload());
            gen.getInclasses().add(c);
            inClassesJPanel.add(new HTBClassJPanel(c, this));
            inClassesJPanel.revalidate();
        }

    }//GEN-LAST:event_addClassJButtonActionPerformed

    private void sortJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortJButtonActionPerformed
        if (queuesJTabbedPane.getSelectedIndex() == 0) {
            Collections.<HTBClass>sort(gen.getOutclasses(), new PriorityComparator());
            updateClassesPanels();
        } else {
            Collections.<HTBClass>sort(gen.getInclasses(), new PriorityComparator());
            updateClassesPanels();
        }
    }//GEN-LAST:event_sortJButtonActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        ByteArrayOutputStream s = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(s);
        gen.setStream(ps);

        gen.generate();
        ps.flush();

        if (mainJTabbedPane.getTabCount() == 1) {
            mainJTabbedPane.addTab("Script", scriptJPanel);
        }
        mainJTabbedPane.setSelectedIndex(1);
        scriptJTextArea.setText(s.toString());
        scriptJTextArea.setCaretPosition(0);        
    }//GEN-LAST:event_generateButtonActionPerformed

    private void resetJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetJButtonActionPerformed
        gen = new Generator();
        setValuesFromGenerator();
        lanJTextField.setText("100 mbit");

        gen.getOutclasses().clear();
        outClassesJPanel.removeAll();
        outClassesJPanel.revalidate();
        outClassesJPanel.repaint();

        gen.getInclasses().clear();
        inClassesJPanel.removeAll();
        inClassesJPanel.revalidate();
        inClassesJPanel.repaint();
}//GEN-LAST:event_resetJButtonActionPerformed

    private void imqJCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_imqJCheckBoxStateChanged
        gen.setImq(imqJCheckBox.isSelected());
    }//GEN-LAST:event_imqJCheckBoxStateChanged

    private void outifaceJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_outifaceJTextFieldFocusLost
        gen.setOutiface(outifaceJTextField.getText());
    }//GEN-LAST:event_outifaceJTextFieldFocusLost

    private void inifaceJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inifaceJTextFieldFocusLost
        gen.setIniface(inifaceJTextField.getText());
    }//GEN-LAST:event_inifaceJTextFieldFocusLost

    private void downloadJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_downloadJTextFieldFocusLost
        gen.setDownload(new Bandwidth(downloadJTextField.getText()));
    }//GEN-LAST:event_downloadJTextFieldFocusLost

    private void uploadJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_uploadJTextFieldFocusLost
        gen.setUpload(new Bandwidth(uploadJTextField.getText()));
    }//GEN-LAST:event_uploadJTextFieldFocusLost

    private void lanJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lanJTextFieldFocusLost
        gen.setLan(new Bandwidth(lanJTextField.getText()));
    }//GEN-LAST:event_lanJTextFieldFocusLost

    private void example1JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_example1JButtonActionPerformed
        loadExample1();
    }//GEN-LAST:event_example1JButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        mainJTabbedPane.setSelectedIndex(0);
    }//GEN-LAST:event_backJButtonActionPerformed

    public void updateClassesPanels() {
        outClassesJPanel.removeAll();
        inClassesJPanel.removeAll();
        for (HTBClass c : gen.getOutclasses()) {
            outClassesJPanel.add(new HTBClassJPanel(c, this));
        }
        for (HTBClass c : gen.getInclasses()) {
            inClassesJPanel.add(new HTBClassJPanel(c, this));
        }
        outClassesJPanel.revalidate();
        outClassesJPanel.repaint();
        inClassesJPanel.revalidate();
        inClassesJPanel.repaint();
        updateSliders();
    }

    public void updateRates() {
        float sum = 0; // sum of sliders values
        int full = 0;
        JPanel classesJPanel;

        if (queuesJTabbedPane.getSelectedIndex() == 0) {
            for (HTBClass cl : getGenerator().getOutclasses()) {
                sum += cl.getPercent();
            }
            full = getGenerator().getUpload().getBps();
            classesJPanel = outClassesJPanel;
        } else {
            for (HTBClass cl : getGenerator().getInclasses()) {
                sum += cl.getPercent();
            }
            full = getGenerator().getDownload().getBps();
            classesJPanel = inClassesJPanel;
        }


        for (Component o : classesJPanel.getComponents()) {
            HTBClassJPanel p = (HTBClassJPanel) o;
            float val = p.getCl().getPercent();
            int rate = (int) (val / sum * full);
            Bandwidth band = new Bandwidth(0);
            band.setBps(rate);
            p.getCl().setRate(band);
            p.rateJTextField.setText(band.toString());
        }
    }

    public void updateSliders() {
        for (int i = 0; i < 2; i++) {
            int sum = 0;
            int full = 0;
            JPanel classesJPanel;

            if (i == 0) {
                for (HTBClass cl : getGenerator().getOutclasses()) {
                    sum += cl.getRate().getBps();
                }
                full = getGenerator().getUpload().getBps();
                classesJPanel = outClassesJPanel;
            } else {
                for (HTBClass cl : getGenerator().getInclasses()) {
                    sum += cl.getRate().getBps();
                }
                full = getGenerator().getDownload().getBps();
                classesJPanel = inClassesJPanel;
            }
            for (Component o : classesJPanel.getComponents()) {
                HTBClassJPanel p = (HTBClassJPanel) o;
                p.getCl().setPercent(1.0f * p.getCl().getRate().getBps() / full);
                float val = 1.0f * p.getCl().getRate().getBps() / sum;
                p.rateJSlider.setValue((int) (100.0f * val));
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addClassJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton clearJButton;
    private javax.swing.JPanel configJPanel;
    private javax.swing.JTextField downloadJTextField;
    private javax.swing.JButton example1JButton;
    private javax.swing.JButton generateButton;
    private htb.gui.HTBClassJPanel hTBClassJPanel1;
    private htb.gui.HTBClassJPanel hTBClassJPanel2;
    private htb.gui.HTBClassJPanel hTBClassJPanel3;
    private htb.gui.HTBClassJPanel hTBClassJPanel5;
    private htb.gui.HTBClassJPanel hTBClassJPanel6;
    private htb.gui.HTBClassJPanel hTBClassJPanel7;
    private javax.swing.JCheckBox imqJCheckBox;
    private javax.swing.JPanel inClassesJPanel;
    private javax.swing.JTextField inifaceJTextField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField lanJTextField;
    private javax.swing.JTabbedPane mainJTabbedPane;
    private javax.swing.JPanel outClassesJPanel;
    private javax.swing.JTextField outifaceJTextField;
    javax.swing.JTabbedPane queuesJTabbedPane;
    private javax.swing.JPanel scriptJPanel;
    private javax.swing.JTextArea scriptJTextArea;
    private javax.swing.JButton sortJButton;
    private javax.swing.JTextField uploadJTextField;
    // End of variables declaration//GEN-END:variables
    public Generator getGenerator() {
        return gen;
    }

    public void setGenerator(Generator gen) {
        this.gen = gen;
    }
}
